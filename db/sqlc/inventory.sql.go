// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: inventory.sql

package db

import (
	"context"
)

const getInventory = `-- name: GetInventory :one
SELECT
	i.product_id,
	i.warehouse_id,
	stock_level,
	p.name as product_name,
	w.name as warehouse_name,
	alert_threshold
FROM inventory AS i
INNER JOIN products as p on p.product_id = i.product_id
INNER JOIN warehouses as w on w.warehouse_id = i.warehouse_id
WHERE i.warehouse_id = $1 AND i.product_id = $2
LIMIT 1
`

type GetInventoryParams struct {
	WarehouseID int32
	ProductID   int32
}

type GetInventoryRow struct {
	ProductID      int32
	WarehouseID    int32
	StockLevel     int32
	ProductName    string
	WarehouseName  string
	AlertThreshold int32
}

func (q *Queries) GetInventory(ctx context.Context, arg GetInventoryParams) (GetInventoryRow, error) {
	row := q.db.QueryRow(ctx, getInventory, arg.WarehouseID, arg.ProductID)
	var i GetInventoryRow
	err := row.Scan(
		&i.ProductID,
		&i.WarehouseID,
		&i.StockLevel,
		&i.ProductName,
		&i.WarehouseName,
		&i.AlertThreshold,
	)
	return i, err
}

const insertStockLog = `-- name: InsertStockLog :exec
INSERT INTO stock_logs (product_id, warehouse_id, previous_stock, updated_stock)
VALUES ($1, $2, $3, $4)
`

type InsertStockLogParams struct {
	ProductID     int32
	WarehouseID   int32
	PreviousStock int32
	UpdatedStock  int32
}

func (q *Queries) InsertStockLog(ctx context.Context, arg InsertStockLogParams) error {
	_, err := q.db.Exec(ctx, insertStockLog,
		arg.ProductID,
		arg.WarehouseID,
		arg.PreviousStock,
		arg.UpdatedStock,
	)
	return err
}

const updateInventory = `-- name: UpdateInventory :exec
UPDATE inventory
SET stock_level = $1
WHERE warehouse_id = $2 AND product_id = $3
`

type UpdateInventoryParams struct {
	StockLevel  int32
	WarehouseID int32
	ProductID   int32
}

func (q *Queries) UpdateInventory(ctx context.Context, arg UpdateInventoryParams) error {
	_, err := q.db.Exec(ctx, updateInventory, arg.StockLevel, arg.WarehouseID, arg.ProductID)
	return err
}
